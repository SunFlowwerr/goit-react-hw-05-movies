{"version":3,"file":"static/js/627.6e762870.chunk.js","mappings":"wQAKaA,EAAS,WAAO,IAAD,EAC1B,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCC,EAAAA,EAAAA,UAAQ,UAC9CF,EAAaG,IAAI,gBAD6B,QACjB,IAD/B,eAAOC,EAAP,KAAqBC,EAArB,KAGA,GAA4BH,EAAAA,EAAAA,UAAS,IAArC,eAAOI,EAAP,KAAeC,EAAf,KA8BA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAoBT,EAAaG,IAAI,SAEtCM,IAILC,EAAAA,EAAAA,IAAmBD,GAAmBE,MAAK,SAAAL,GAAM,OAC/CC,EAAUD,EAAOM,QAD8B,GAGlD,GAAE,CAACZ,KAGF,4BACE,kBAAMa,SA1BW,SAAAC,GAGnB,GAFAA,EAAEC,iBAE0B,KAAxBX,EAAaY,OACf,OAAOf,EAAgB,CAAC,GAE1BA,EAAgB,CAAEgB,MAAOb,KAEzBM,EAAAA,EAAAA,IAAmBN,GAAcO,MAAK,SAAAL,GAAM,OAAIC,EAAUD,EAAOM,QAArB,IAC5CP,EAAgB,GACjB,EAgBG,WACE,kBAAOa,SA/BQ,SAAAJ,GACnBT,EAAgBS,EAAEK,cAAcC,MAAMC,cACvC,EA6BoCD,MAAOhB,KACtC,mBAAQkB,KAAK,SAAb,SAAsB,eAExB,SAACC,EAAA,EAAD,CAAYjB,OAAQA,EAAQkB,GAAI,OAGrC,EAED,G,oFC/CaD,EAAa,SAAC,GAAoB,IAAlBjB,EAAiB,EAAjBA,OAAQkB,EAAS,EAATA,GAC7BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,wBACGpB,EAAOqB,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,SAAC,KAAD,CAAML,GAAE,UAAKA,GAAL,OAAUK,GAAMC,MAAO,CAAEC,KAAMN,GAAvC,UACE,wBAAcG,GAALC,IAFD,KAOjB,C,uJChBD,IAAMG,EAAU,mCACVC,EAAW,gCAEjB,SAASC,EAAWC,GAClB,OAAOC,MAAMD,GAAKxB,MAAK,SAAA0B,GACrB,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,gCACjC,GACF,CAEM,SAASC,IACd,OAAOT,EAAW,GAAD,OAAID,EAAJ,sCAA0CD,GAC5D,CAEM,SAASY,EAAkBC,GAChC,OAAOX,EAAW,GAAD,OAAID,EAAJ,iBAAqBY,EAArB,oBAAwCb,GAC1D,CAEM,SAAStB,EAAmBoC,GACjC,OAAOZ,EAAW,GAAD,OACZD,EADY,gCACoBD,EADpB,kBACqCc,EADrC,8BAGlB,CAEM,SAASC,EAAgBF,GAC9B,OAAOX,EAAW,GAAD,OAAID,EAAJ,iBAAqBY,EAArB,4BAAgDb,GAClE,CAEM,SAASgB,EAAmBH,GACjC,OAAOX,EAAW,GAAD,OAAID,EAAJ,iBAAqBY,EAArB,4BAAgDb,GAClE,C","sources":["components/Movies/Movies.jsx","components/MoviesList/MoviesList.jsx","source/movie-api.jsx"],"sourcesContent":["import { MoviesList } from 'components/MoviesList';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByInput } from 'source/movie-api';\n\nexport const Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchString, setSearchString] = useState(\n    searchParams.get('query') ?? ''\n  );\n  const [movies, setMovies] = useState([]);\n\n  const handleChange = e => {\n    setSearchString(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchString.trim() === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: searchString });\n\n    fetchMoviesByInput(searchString).then(movies => setMovies(movies.results));\n    setSearchString('');\n  };\n\n  useEffect(() => {\n    const searchParamsQuery = searchParams.get('query');\n\n    if (!searchParamsQuery) {\n      return;\n    }\n\n    fetchMoviesByInput(searchParamsQuery).then(movies =>\n      setMovies(movies.results)\n    );\n  }, [searchParams]);\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input onChange={handleChange} value={searchString}></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      <MoviesList movies={movies} to={''}></MoviesList>\n    </div>\n  );\n};\n\nexport default Movies;\n","import { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies, to }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ title, id }) => (\n        <Link to={`${to}${id}`} state={{ from: location }}>\n          <li key={id}>{title}</li>\n        </Link>\n      ))}\n    </ul>\n  );\n};\n\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n  to: PropTypes.string.isRequired,\n};\n","const API_KEY = 'a20001fba40fff44345e5993730d4bd9';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nfunction fetchError(url) {\n  return fetch(url).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('No matches with entered data'));\n  });\n}\n\nexport function fetchTrandingMovies() {\n  return fetchError(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\n}\n\nexport function fetchMovieDetails(movieId) {\n  return fetchError(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}`);\n}\n\nexport function fetchMoviesByInput(input) {\n  return fetchError(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${input}&page=1&include_adult=true`\n  );\n}\n\nexport function fetchMoviesCast(movieId) {\n  return fetchError(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`);\n}\n\nexport function fetchMoviesReviews(movieId) {\n  return fetchError(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`);\n}\n"],"names":["Movies","useSearchParams","searchParams","setSearchParams","useState","get","searchString","setSearchString","movies","setMovies","useEffect","searchParamsQuery","fetchMoviesByInput","then","results","onSubmit","e","preventDefault","trim","query","onChange","currentTarget","value","toLowerCase","type","MoviesList","to","location","useLocation","map","title","id","state","from","API_KEY","BASE_URL","fetchError","url","fetch","response","ok","json","Promise","reject","Error","fetchTrandingMovies","fetchMovieDetails","movieId","input","fetchMoviesCast","fetchMoviesReviews"],"sourceRoot":""}